import AsyncStorage from '@react-native-community/async-storage';
import React, { useRef } from 'react';
import { Text, View } from 'react-native';
import { check, PERMISSIONS, request, RESULTS } from 'react-native-permissions';
import ViewShot from 'react-native-view-shot';
import { Spacing, Typography } from 'styles';
import { storeKey } from 'utils/constant';
import {
  FeminineIcon,
  Lovely2Icon,
  LovelyIcon,
  SexyIcon,
  SimpleIcon,
  Street2Icon,
  StreetIcon
} from 'assets/content-svg';
import {
  getRandomInt, shareFacebook
} from '_helper';
import { LogoIcon } from '_icons';
import * as cs from 'styles/legacy/common.style';
import theme from 'styles/legacy/theme.style';
import { toast } from 'components/alert/toast';

/** @deprecated   **/
const PickResult = ({ data }) => {
  const viewShotRef = useRef();

  const hasPhotoLibraryPermission = async (isIOS: boolean) => {
    let granted = false;
    let isOpenDialog = false;
    const hasOpen = await AsyncStorage.getItem(storeKey.alreadyAskPermission);

    const status = await check(
      isIOS ? PERMISSIONS.IOS.PHOTO_LIBRARY : PERMISSIONS.ANDROID.WRITE_EXTERNAL_STORAGE,
    );
    if (status == RESULTS.GRANTED) {
      granted = true;
    } else if (status == RESULTS.BLOCKED || status === RESULTS.LIMITED) {
      isOpenDialog = true;
    }

    if (status === RESULTS.DENIED) {
      const permissionAndroid = await request(
        isIOS ? PERMISSIONS.IOS.PHOTO_LIBRARY : PERMISSIONS.ANDROID.WRITE_EXTERNAL_STORAGE,
      );
      if (permissionAndroid == RESULTS.GRANTED) {
        granted = true;
      } else if (permissionAndroid == RESULTS.BLOCKED) {
        if (hasOpen !== 'true') {
          AsyncStorage.setItem(storeKey.alreadyAskPermission, 'true');
        } else {
          isOpenDialog = true;
        }
      }
    }

    console.log(granted, isOpenDialog);
    return { granted: granted, isOpenDialog: isOpenDialog };
  };

  const onSuccess = (message: string) => {
    toast(message);
  };

  const onShareFB = async () => {
    try {
      await shareFacebook(viewShotRef);
      toast('Chia s·∫ª th√†nh c√¥ng');
    } catch (_) {
      onSuccess('ƒê√£ x·∫£y ra l·ªói');
    }
  };

  const _renderImage = ({
    primary_style: style,
    primary_style: primaryStyle,
    user_first_color: primaryColor,
  }) => {
    let subColor = theme.BLACK;
    let textList = [];
    let text = '';
    let image = <StreetIcon size={Spacing.screen.width} color={primaryColor} />;

    // Need to make this as a DB in Server
    switch (style) {
      case 'street':
        textList = [
          'Th·ªùi trang c√≥ th·ªÉ mua,\nphong c√°ch ph·∫£i s·ªü h·ªØu!',
          'Phong c√°ch l√† th·ª© s·∫Ω n√≥i l√™n\nb·∫°n l√† ai m√† kh√¥ng c·∫ßn c·∫•t l·ªùi ü§ü',
        ];
        var images = [
          {
            image: <StreetIcon size={Spacing.screen.width} color={primaryColor} />,
            subColor: theme.BLACK,
          },
          {
            image: <Street2Icon size={Spacing.screen.width} color={primaryColor} />,
            subColor: theme.BLACK,
          },
        ];
        var ramdomInteger = Math.floor(Math.random() * images.length);
        subColor = images[ramdomInteger].subColor;
        image = images[ramdomInteger].image;
        text = textList[getRandomInt(textList.length)];
        break;
      case 'simple':
        textList = [
          'Em ƒë·ª´ng xem m·∫•y cu·ªôc thi hoa h·∫≠u n·ªØa, l·∫•y g∆∞∆°ng ra m√† soi cho ƒë·ª° m·∫•t th·ªùi gian!',
          'Hi Anh!',
          'Em ƒë√¢y ch·∫≥ng th√≠ch nhi·ªÅu l·ªùi, Nh√¨n Anh l√† bi·∫øt b·∫°n ƒë·ªùi c·ªßa Em...‚ù§Ô∏è',
        ];
        subColor = '#974a47';
        image = <SimpleIcon size={Spacing.screen.width} color={primaryColor} />;
        text = textList[getRandomInt(textList.length)];
        break;
      case 'lovely':
        var images = [
          {
            image: <LovelyIcon size={Spacing.screen.width} color={primaryColor} />,
            subColor: '#ff746d',
          },
          {
            image: <Lovely2Icon size={Spacing.screen.width} color={primaryColor} />,
            subColor: '#8b5b45',
          },
        ];
        var ramdomInteger = Math.floor(Math.random() * images.length);
        subColor = images[ramdomInteger].subColor;
        textList = [
          'Hi Anh!',
          'Nh∆∞ th·∫ø n√†y li·ªáu ƒë√£ ƒë·ªß ti√™u chu·∫©n ƒë·ªÉ l√†m b·∫°n g√°i anh ch∆∞a?',
          'B·∫°n ch∆∞a t√¨m ƒë∆∞·ª£c ho√†ng t·ª≠ kh√¥ng c√≥ nghƒ©a b·∫°n kh√¥ng ph·∫£i l√† m·ªôt c√¥ng ch√∫a',
        ];

        image = images[ramdomInteger].image;
        text = textList[getRandomInt(textList.length)];
        break;
      case 'feminine':
        subColor = '#636db3';
        textList = [
          'Ph·ª• n·ªØ hi·ªán ƒë·∫°i ch·∫≥ng ng·∫°i ƒë·ªôc th√¢n!',
          'Ng∆∞·ªùi ph·ª• n·ªØ m·∫°nh m·∫Ω l√† ng∆∞·ªùi s·ªü h·ªØu ti·∫øng n√≥i c·ªßa ri√™ng m√¨nh!',
        ];
        image = <FeminineIcon size={Spacing.screen.width} color={primaryColor} />;
        text = textList[getRandomInt(textList.length)];
        break;
      case 'sexy':
        subColor = '#59249c';
        textList = [
          'Ph·ª• n·ªØ h√£y ƒë·∫πp m·ªói ng√†y, ƒë·ª´ng ch·ªâ ƒë·∫πp khi c·∫ßn!',
          'H·ªçc ƒÉn h·ªçc n√≥i h·ªçc tr√≥i anh b·∫±ng c√† v·∫°t!',
          'H√¨nh nh∆∞ l√† em chi·ªÅu c√°c anh qu√° r·ªìi n√™n c√°c anh h∆∞ ƒë√∫ng kh√¥ng',
          'Hi Anh!',
        ];
        image = <SexyIcon size={Spacing.screen.width} color={primaryColor} />;
        text = textList[getRandomInt(textList.length)];
        break;
      default:
        subColor = theme.BLACK;
        textList = [];
        image = null;
        text = '';
    }
    return (
      <View>
        <View
          style={{
            position: 'absolute',
            zIndex: 10,
            width: Spacing.screen.width,
            height: (Spacing.screen.width / 36) * 5,
            top: Spacing.screen.width / 12,
            paddingHorizontal: Spacing.screen.width / 9,
            alignItems: 'center',
            justifyContent: 'center',
          }}>
          <Text
            style={{
              ...Typography.boxTitle,
              color: subColor,
              textAlign: 'center',
            }}>
            {text}
          </Text>
        </View>
        {image ?? (
          <View
            style={{
              width: Spacing.screen.width,
              aspectRatio: 36 / 45,
              backgroundColor: theme.LIGHT_GRAY,
            }}
          />
        )}
        <View
          style={{
            position: 'absolute',
            zIndex: 10,
            width: Spacing.screen.width,
            bottom: Spacing.screen.width / 18,
            paddingHorizontal: Spacing.screen.width / 6,
            alignItems: 'center',
            justifyContent: 'center',
          }}>
          <Text
            style={{
              ...Typography.option,
              color: subColor,
              textAlign: 'center',
              top: 2,
            }}>
            {primaryStyle && 'Phong c√°ch c·ªßa b·∫°n l√†\n' + primaryStyle}
          </Text>
        </View>
        <View
          style={{
            position: 'absolute',
            zIndex: 10,
            bottom: Spacing.screen.width / 18,
            left: Spacing.screen.width / 18,
            alignItems: 'center',
            justifyContent: 'center',
          }}>
          <LogoIcon color={theme.WHITE} />
        </View>
        <View
          style={{
            position: 'absolute',
            zIndex: 10,
            height: 30,
            bottom: Spacing.screen.width / 18,
            right: Spacing.screen.width / 18,
            alignItems: 'center',
            justifyContent: 'center',
          }}>
          <Text
            style={{
              ...Typography.smallCaption,
              color: theme.WHITE,
            }}>
            T·ªß ƒë·ªì ƒë·∫∑c bi·ªát c·ªßa n·ªØ
          </Text>
        </View>
      </View>
    );
  };

  const _renderShareIcons = () => {
    return (
      <View style={[{ alignItems: 'center', paddingVertical: 20 }]}>
        <Text style={[Typography.boxTitle, cs.c_pc]}>Chia s·∫ª style c·ªßa b·∫°n v·ªõi b·∫°n b√®</Text>
        <View style={{ flexDirection: 'row', marginTop: 10 }}>
          {/* <IconCircleButton
            icon={<FacebookIcon />}
            rounded
            background={theme.FACEBOOK_BLUE}
            border={theme.FACEBOOK_BLUE}
            buttonStyle={{ marginRight: theme.MARGIN_20 }}
            handleOnPress={onShareFB}
          /> */}
          {/* <IconCircleButton
            icon={<InstaIcon color={theme.PRIMARY_COLOR} />}
            background={theme.WHITE}
            border={theme.LIGHT_GRAY}
            rounded
            buttonStyle={{ marginRight: theme.MARGIN_20 }}
            handleOnPress={async () => {
              if (Platform.OS == 'android') {
                shareInstagram(viewShotRef);
              } else {
                const { granted, isOpenDialog } = await hasPhotoLibraryPermission(true);
                if (isOpenDialog) {
                  openPermissionsDialog('Y√™u c·∫ßu truy c·∫≠p v√†o th∆∞ vi·ªán ·∫£nh b·ªã t·ª´ ch·ªëi.');
                } else if (granted) {
                  shareInstagram(viewShotRef);
                }
              }
            }}
          />
          <IconCircleButton
            icon={<DabiFont name={'download'} color={theme.WHITE} />}
            background={theme.PRIMARY_COLOR}
            rounded
            handleOnPress={async () => {
              const { granted, isOpenDialog } = await hasPhotoLibraryPermission(
                Platform.OS == 'ios',
              );
              if (isOpenDialog) {
                openPermissionsDialog('Y√™u c·∫ßu truy c·∫≠p v√†o th∆∞ vi·ªán ·∫£nh b·ªã t·ª´ ch·ªëi.');
              } else if (granted) {
                saveToPhotoAlbum(viewShotRef, onSuccess, openPermissionsDialog);
              }
            }}
          /> */}
        </View>
      </View>
    );
  };
  return (
    <View>
      <ViewShot ref={viewShotRef}>{data && _renderImage(data)}</ViewShot>
      {_renderShareIcons()}
    </View>
  );
};

export default PickResult;
